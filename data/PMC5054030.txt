 Many classes of non-coding RNAs can be characterized by a pattern of short but well-conserved sequence elements that are separated by poorly conserved regions of sometimes highly variable lengths. Local alignment algorithms such as BLAST are therefore ill-suited for the discovery of new homologs of such ncRNAs in genomic sequences. The Fragrep tool instead implements an efficient algorithm for detecting the pattern fragments that occur in a given order. For each pattern fragment, the mismatch tolerance and bounds on the length of the intervening sequences can be specified separately. Furthermore, matches can be ranked by a statistically well-motivated scoring scheme. Key words: Fragrep, non-coding RNA detection, fragmented pattern, Dictyostelium discoideum Introduction Methods for detecting non-coding RNAs in genomic sequence data have been a topic of intense research. While techniques for detecting protein-coding genes can rely on universal characteristics such as start and stop codons, triplet amino acid codes, or ribosome binding sites, there are no corresponding characteristics known in ncRNAs. Early approaches to ncRNA detection were designed for specific types of RNAs, in particular tRNAs. Other approaches to ncRNA searching were designed for detecting arbitrary ncRNA classes, typically based on the conserved sequences or secondary structure elements. The RNAMotif tool allows to describe a search pattern consisting of conserved stems and helices, while the ERPIN tool allows to annotate an alignment with secondary structure information, which is then used as a search pattern. The INFERNAL tool also derives its query from a multiple alignment. In contrast to ERPIN, however, the alignment is translated into a stochastic context-free grammar, which is then used for the task of scanning genomic sequences. In general, the computational complexity of searching RNAs increases with the complexity of the search pattern, limiting the use of such methods for genome-wide surveys. In this paper, we present Fragrep, an efficient tool that is optimized for this kind of sequence-based searches. The approach implemented in the Fragrep tool is based on an elementary way of describing search patterns, allowing a highly efficient and hence genome-wide application. This approach is particularly fruitful for the classes of ncRNAs that contain stem or loop regions with well-conserved sequence patterns, such as Y RNAs and vault RNAs 5., 6., 7., which, however, are interrupted by non-conserved sequences of highly variable lengths. Compared to RNAMotif, we provide a statistically well-motivated ranking scheme, which relieves the user from defining an individual scoring scheme as in RNAMotif. On the other hand, Fragrep does not search for explicit secondary structure constraints. The problem of efficiently searching a large sequence database for interrupted sequence patterns is also relevant in the context of other ncDNA motifs, for example cis-regulatory modules. In this context, the approach investigated in Fragrep is complementary to the motif discovery procedures such as BioOptimizer or Bipad : once a suitable motif has been discovered, Fragrep can be applied to scan genome databases for such patterns. In some cases, the fragmented patterns are informative enough to be clearly distinguished between true and false positives. In many other cases, however, Fragrep can at least act as an efficient filtering technique. The Fragrep tool can be downloaded from the URL. Algorithm Suppose that the ncRNA of interest contains k conserved sequence fragments, denoted by C 1, …, C k, which occur in a given order in a set of known examples. In practice, the fragment C i is obtained as the consensus sequence of conserved blocks in a multiple alignment. Scanning a genome T for these blocks, we expect to find a non-conserved sequence segment X i between any two fragments C i and C i +1. Fragrep solves the problem of determining whether there are sequences X 1, …, X k –1 so that the string C 1 X 1 C 2 X 2 … X k− 1 C k is contained as a substring in T. Additionally, Fragrep can take into account two further aspects: Gap length bounds : For each X i, the user can specify the upper and lower bounds of the length, denoted by u i and ℓ i, respectively; only the matches satisfying ℓ i ≤| X i |≤ u i will be taken into account by Fragrep. Mismatches : The fragment C i does not need to match the corresponding sequence part of T exactly; the user can specify the number of mismatches. Denoting C i ′ as the modified fragment of C i by at most m i arbitrary mismatches, Fragrep will report the occurrences of C 1 ′ X 1 C 2 ′ X 2 … X k − 1 C k ′ as well. We also refer to the string C 1 X 1 C 2 X 2 … X k –1 C k satisfying all these constraints as a matching subsequence of T. Similar features are incorporated in other tools such as RNAbob, which is based on a nondeterministic finite state machine with node rewriting rules instead of the dynamic programming approach used by Fragrep. The algorithm underlying Fragrep essentially works in two steps: 1. For each i ϵ, compute a list of all occurrences of C i in T. 2. Apply a dynamic programming algorithm to the lists computed in the first step in order to find all matching subsequences in T. Performing step 1 is straight-forward. As a result, we obtain an ordered list of indices Y i = 〈 y i,1, y i,2, …, y i, L i 〉, with y i, j denoting the position of the j th occurrence of C i in T, and L i denoting the number of occurrences of C i in T. Using Y 1, …, Y k, we now set up a graph G = with the vertex V = and an edge between and, whenever the corresponding occurrences of C i and C i +1 satisfy the upper and lower bounds for the gap in between. Obviously, any path of length k − 1 in G corresponds to a valid occurrence of C 1, …, C k in T. For each, i ϵ and j ϵ, we now compute M i, j : =, we have p = p q so that we finally obtain p = p ∏ 2 ≤ j ≤ k q As described above, p is the probability of observing at least one exact match of the given fragmented pattern in a sequence of length N. This value can be easily adapted to the scenario involving occurrences with a certain number of mismatches by modifying the probabilities P T accordingly. Since different matches obtained by Fragrep generally have different mismatches in different positions, we can also compute the analogous probabilities for the individual matches detected by Fragrep. Finally, w := −log ) provides a convenient and statistically well-motivated ranking scheme for the matches. Results and Discussion We used Fragrep to studying the evolution of a class of ncRNAs in the slime mold Dictyostelium discoideum that was discovered in an experimental survey by Aspegren et al.. We searched the genomic sequence for the type-I ncRNAs using the following simple pattern: The first two columns contain the minimal and maximal distance between the pattern fragment, the last column is the maximal number of mismatches that is tolerated in each fragment. The gap length in the sequences derived from the study by Aspegren et al. ranges between 58 and 88 nucleotides, so that 120 is a reasonable choice for the gap length’s upper bound. We recovered 45 candidates, of which 34 were sufficiently similar to the experimentally determined sequences to be alignable. The other 11 very divergent sequences were not included in the further analysis. A neighborjoining tree summarizing both known sequences and the novel candidates detected by Fragrep is displayed in Figure 1. We find that the class-I ncRNAs are located in small clusters in all six chromosomes. Interestingly, there are two subclasses, denoted by A and B, that alternate in the larger clusters, even though their directions on the chromosomes do not seem to follow a simple rule. Fig. 1 The type-I ncRNAs from Dictyostelium discoideum. Top Left: The phylogenetic tree suggests that there are two major subgroups, labeled as A and B. Leaf labels refer to the positions of the corresponding occurrences within the genome;... In order to evaluate the performance of the algorithm underlying Fragrep, we used the query derived from the vault RNA A-, B1-, and B2-box consensus structures in Kickhoefer et al. to scan the whole human genome. The query consisted of three fragments, each of which was 11 nucleotides long. Scanning all chromosomes of the human genome took less than 10 minutes on a standard desktop computer with a 2 GHz processor and 1 GB main memory. Further results from scanning the human as well as the mouse, rat, and dog genomes are listed in Table 1. Table 1 Surveys of Mammalian Genomes for vault RNA Candidates In order to obtain an estimation of the influence of high gap-length tolerance on the running time, we modified the above query to allow for gap lengths up to 20,000, resulting in an increase of the running time by less than five folds. Note that this increase in fault tolerance also increased the number of matching subsequences to the order of hundreds of thousands, so that the significance of such highly fault tolerant queries is already limited from a practical point of view. In spite of this undue fault tolerance, the running time remains within acceptable bounds. These examples demonstrate that Fragrep can be used for systematic surveys of eukaryotic genomes. The application of standard multiple alignment tools such as ClustalW or Dialign to a relatively small set of representatives of an ncRNA class can be used to determine conserved sequence patterns, which can be turned into Fragrep queries in a straight-forward manner. The Fragrep tool can then be employed to find additional members of the ncRNA family in related genomes. This approach yields significant matches where other sequence search tools such as BLAST fail to report useful results, while the structure based approaches such as INFERNAL are too costly. Naturally, Fragrep is not limited to ncRNA detection; the search for specific constellations of transcription factor binding sites is another potential application. Furthermore, the approach could be easily adapted to searching peptide motifs in protein databases. Acknowledgements This work was supported by the Bioinformatics Initiative of the German Research Association. Article information Genomics Proteomics Bioinformatics. 2006; 4: 56–60. Published online 2006 Apr 18. doi: 10.1016/S1672-022960017-X PMCID: PMC5054030 PMID: 16689703 Axel Mosig, 1, 5, * Katrin Sameith, 2 and Peter Stadler 2, 3, 4 Axel Mosig 1 Department of Combinatorics and Geometry, CAS/MPG Partner Institute for Computational Biology, Shanghai Institutes for Biological Sciences, Chinese Academy of Sciences, Shanghai 200031, China 5 Max Planck Institute for Mathematics in the Sciences, Leipzig D-04103, Germany Find articles by Axel Mosig Katrin Sameith 2 Bioinformatics Group, Department of Computer Science and Interdisciplinary Center for Bioinformatics, University of Leipzig, Leipzig D-04103, Germany Find articles by Katrin Sameith Peter Stadler 2 Bioinformatics Group, Department of Computer Science and Interdisciplinary Center for Bioinformatics, University of Leipzig, Leipzig D-04103, Germany 3 Institute for Theoretical Chemistry, University of Vienna, Vienna A-1090, Austria 4 The Santa Fe Institute, Santa Fe, NM 87501, USA Find articles by Peter Stadler 1 Department of Combinatorics and Geometry, CAS/MPG Partner Institute for Computational Biology, Shanghai Institutes for Biological Sciences, Chinese Academy of Sciences, Shanghai 200031, China 2 Bioinformatics Group, Department of Computer Science and Interdisciplinary Center for Bioinformatics, University of Leipzig, Leipzig D-04103, Germany 3 Institute for Theoretical Chemistry, University of Vienna, Vienna A-1090, Austria 4 The Santa Fe Institute, Santa Fe, NM 87501, USA 5 Max Planck Institute for Mathematics in the Sciences, Leipzig D-04103, Germany Axel Mosig: nc.ca.sbis@gisom * Corresponding author. nc.ca.sbis@gisom Copyright © 2006 Beijing Institute of Genomics This is an open access article under the CC BY-NC-SA license ( Articles from Genomics, Proteomics & Bioinformatics are provided here courtesy of Elsevier 